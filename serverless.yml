service: unitemate
frameworkVersion: "3"

provider:
  name: aws
  endpointType: REGIONAL
  runtime: python3.9
  region: ap-northeast-1
  stackName: ${sls:stage}-${self:service}-stack
  deploymentBucket:
    name: ${self:service}.sls-deployment-store
    maxPreviousDeploymentArtifacts: 3
  logRetentionInDays: 7
  apiGateway:
    apiKeys:
      - name: ${sls:stage}-${self:service}-apiKey
        value: ${ssm:/${self:service}/${sls:stage}/apiKey}
        description: API Key for ${sls:stage}-${self:service}
  iam:
    role:
      name: ${self:service}-role-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt DynamoDBMatchQueue.Arn
            - !Join ["", [!GetAtt DynamoDBMatchQueue.Arn, "/index/*"]]
            - !GetAtt DynamoDBMatchTable.Arn
            - !Join ["", [!GetAtt DynamoDBMatchTable.Arn, "/index/*"]]
            - !GetAtt DynamoDBUserTable.Arn
            - !Join ["", [!GetAtt DynamoDBUserTable.Arn, "/index/*"]]
            - !GetAtt DynamoDBRecordTable.Arn # レコード
            - !Join ["", [!GetAtt DynamoDBRecordTable.Arn, "/index/*"]]
            - !GetAtt ConnectionTable.Arn
            - !Join ["", [!GetAtt ConnectionTable.Arn, "/*"]]
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-*
        - Effect: Allow
          Action:
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${self:service}/bubbleApiKey
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - arn:aws:sqs:${aws:region}:${aws:accountId}:${self:service}-${sls:stage}-match-report-queue
            - !GetAtt AggregationQueue.Arn

        - Effect: Allow
          Action:
            - apigatewaymanagementapi:GetConnection
            - apigatewaymanagementapi:PostToConnection
          Resource:
            - arn:aws:execute-api:${aws:region}:${aws:accountId}:*/@connections/*
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
            - apigatewaymanagementapi:GetConnection
            - apigatewaymanagementapi:PostToConnection
          Resource:
            - arn:aws:execute-api:${aws:region}:${aws:accountId}:${self:custom.websocketApiId}/${sls:stage}/@connections/*

        - Effect: Allow
          Action:
            - apigateway:GET
          Resource:
            - arn:aws:apigateway:${aws:region}::/apis/*
  environment:
    MATCH_QUEUE: !Ref DynamoDBMatchQueue
    MATCH_TABLE: !Ref DynamoDBMatchTable
    USER_TABLE: !Ref DynamoDBUserTable
    REPORT_QUEUE: !Ref ReportQueue
    CONNECTION_TABLE: !Ref ConnectionTable
    AGGREGATION_QUEUE: !Ref AggregationQueue
    RECORD_TABLE: !Ref DynamoDBRecordTable
    AWS_STAGE: ${sls:stage}
    WEBSOCKET_API_ID: !Ref WebsocketsApi
    WSS_DOMAIN_NAME: !Sub "${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com"
    BUBBLE_ASSIGN_MATCH_URL: ${param:bubble_assign_match_id}
    BUBBLE_PENALTY: ${param:bubble_penalty}

package:
  individually: true
  patterns:
    - "!**"
    - src/**
    - pyproject.toml
    - poetry.lock

functions:
  # インキュー ########################
  # キューにインキューするAPI
  inqueue:
    handler: src/match_queue.inqueue
    events:
      - http:
          path: v1/queue/_inqueue
          method: post
          private: true

  # キューからデキューするAPI
  dequeue:
    handler: src/match_queue.dequeue
    events:
      - http:
          path: v1/queue/_dequeue
          method: post
          private: true

  queue_info:
    handler: src/match_queue.get_info
    events:
      - http:
          path: v1/queue
          method: get
          private: true

  # マッチメイク ########################
  match_make: # マッチメイクするバッチ
    handler: src/db_process_queue.send_matchmake_message
    timeout: 15

  # 結果報告、集計 ########################
  match_report: # 試合終了後の試合結果を報告するAPI
    handler: src/db_process_queue.send_match_report_message
    events:
      - http:
          path: v1/match/_report
          method: post
          private: true

  match_info: # ユーザがアサインされているマッチ情報を返すAPI
    handler: src/match_report.get_info
    events:
      - http:
          path: v1/match/{user_id}
          method: get
          private: true

  # ユーザー情報 ########################
  user_upsert: # ユーザを作成・更新するAPI　未使用
    handler: src/user_upsert.handle
    events:
      - http:
          path: v1/users/{user_id}
          method: post
          private: true

  user_delete: # ユーザを削除するAPI　未使用
    handler: src/user_delete.handle
    events:
      - http:
          path: v1/users/{user_id}/_delete
          method: post
          private: true

  user_info: # ユーザ情報を返すAPI
    handler: src/user_info.handle
    events:
      - http:
          path: v1/users/{user_id}
          method: get
          private: true
    environment:
      USER_TABLE: !Ref DynamoDBUserTable

  user_records: # ユーザの試合記録を返すAPI
    handler: src/user_info.get_records
    events:
      - http:
          path: v1/users/{user_id}/rec
          method: get
          private: true
    environment:
      RECORD_TABLE: !Ref DynamoDBRecordTable

  # ランキング ########################
  get_ranking: # ユーザのレートランキングを返すAPI
    handler: src/rankings.get_ranking
    events:
      - http:
          path: v1/ranking
          method: get
          cors: true
          private: true
          caching:
            enabled: ${self:custom.cache.${sls:stage}.cache_enabled}
            ttlInSeconds: ${self:custom.cache.${sls:stage}.cache_ttl}
            cacheKeyParameters:
              - name: "method.request.querystring.namespace" # 必要に応じて変更
    environment:
      USER_TABLE: !Ref DynamoDBUserTable
      RECORD_TABLE: !Ref DynamoDBRecordTable

  # おすすめルート ########################
  recommend_route:
    handler: src/recommend_route.handle
    timeout: 25
    memorySize: 128
    events:
      - http:
          path: v1/recommend_route
          method: post
    environment:
      GEMINI_API_KEY: ${ssm:/${self:service}/gemini/api_key}

  ##################################
  # 追加: WebSocket関数
  ##################################
  wsConnect:
    handler: src/ws_api.on_connect
    events:
      - websocket: $connect

  wsDisconnect:
    handler: src/ws_api.on_disconnect
    events:
      - websocket: $disconnect

  wsMessage:
    handler: src/ws_api.on_message
    events:
      - websocket: $default
    environment:
      USER_TABLE: !Ref DynamoDBUserTable

  connection_test:
    handler: src/ws_api.connection_test
    environment:
      USER_TABLE: !Ref DynamoDBUserTable
      WEBSOCKET_API_ID: !Ref WebsocketsApi
      DUMMY: ${param:dummy_account}
  ##################################

  dbProcessQueueHandler:
    handler: src/db_process_queue.db_process_queue_handler
    name: ${self:service}-${sls:stage}-db-process-queue-handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AggregationQueue
              - Arn
    timeout: 10

  make_judge:
    handler: src/match_judge.gather_match
    name: ${self:service}-${sls:stage}-gather-match
    events:
      - schedule:
          name: ${sls:stage}-${self:service}-gather-matchschedule
          description: Schedule for match making
          rate: cron(*/5 * * * ? *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled}
    timeout: 15

stepFunctions:
  stateMachines:
    MatchMakeStateMachine:
      name: ${self:service}-${sls:stage}-matchmake
      definition:
        Comment: "State machine for match making every 20 seconds for 1 hour."
        StartAt: Initialize
        States:
          Initialize:
            Type: Pass
            Result:
              counter: 0
              maxIterations: 3 # 20秒 x 180 = 3600秒（約1時間）
            ResultPath: "$.loop"
            Next: MatchMakeTask
          MatchMakeTask:
            Type: Task
            Resource: arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-match_make
            ResultPath: "$.taskResult"
            Next: Wait20Seconds
          Wait20Seconds:
            Type: Wait
            Seconds: 20
            Next: IncrementCounter
          IncrementCounter:
            Type: Pass
            Parameters:
              counter.$: "States.MathAdd($.loop.counter, 1)"
              maxIterations.$: "$.loop.maxIterations"
            ResultPath: "$.loop"
            Next: CheckCounter
          CheckCounter:
            Type: Choice
            Choices:
              - Variable: "$.loop.counter"
                NumericLessThan: 3
                Next: MatchMakeTask
            Default: EndState
          EndState:
            Type: Pass
            End: true

custom:
  prune:
    automatic: true
    number: 3
  pythonRequirements:
    dockerizePip: true
    poetryExportWithCredentials: false

  cache:
    prd:
      cache_enabled: true
      cache_ttl: 600 # 10分
      schedule_enabled: true
    dev:
      cache_enabled: false
      cache_ttl: 0
      schedule_enabled: false

  websocketApiId: ${cf:${self:service}-${sls:stage}.WebSocketApiId, 'default-websocket-api-id'}
  websocketApiEndpoint: ${cf:${self:service}-${sls:stage}.WebSocketApiEndpoint, 'default-websocket-endpoint'}

plugins:
  - serverless-step-functions
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-api-gateway-caching

resources:
  Resources:
    DynamoDBMatchQueue:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-match-queue
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: rate
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: rate_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: rate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBMatchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-matches
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: match_id
            AttributeType: "N"
          - AttributeName: status
            AttributeType: S
          - AttributeName: matched_unixtime
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: status_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: match_time_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: matched_unixtime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-users
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: rate
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: rate_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: rate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBRecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-record-table
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: started_date
            AttributeType: "N"
          - AttributeName: match_id
            AttributeType: "N"
        KeySchema:
          - AttributeName: user_id # Use user_id as namespace
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: started_date_index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: started_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-connections
        AttributeDefinitions:
          - AttributeName: connection_id
            AttributeType: S
        KeySchema:
          - AttributeName: connection_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # SQS
    ReportQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-match-report-queue
    AggregationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-${self:service}-aggregation-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true # 同一のメッセージは重複して処理されないようにする

    #websocket
    WebsocketsApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-${sls:stage}-WebSocketApi
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: $request.body.action

    # EventBrigdeRole
    EventBridgeInvocationRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${sls:stage}-EB-InvokeStateMachine
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: InvokeStateMachinePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - states:StartExecution
                  Resource: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:service}-${sls:stage}-matchmake

    WeekdayMatchMakeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${sls:stage}-matchmake-weekday
        Description: "Trigger matchmake state machine on weekdays (JST 14:00 to 04:00)"
        ScheduleExpression: "cron(0/1 5-18 ? * MON-FRI *)"
        State: ENABLED
        Targets:
          - Arn: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:service}-${sls:stage}-matchmake
            Id: "MatchMakeStateMachineTarget"
            RoleArn: !GetAtt EventBridgeInvocationRole.Arn

    WeekendMatchMakeRule:
      Type: AWS::Events::Rule
      Properties:
        Name: ${sls:stage}-matchmake-weekend
        Description: "Trigger matchmake state machine on weekends (JST all day)"
        ScheduleExpression: "cron(0/1 * ? * SAT,SUN *)"
        State: ENABLED
        Targets:
          - Arn: arn:aws:states:${aws:region}:${aws:accountId}:stateMachine:${self:service}-${sls:stage}-matchmake
            Id: "MatchMakeStateMachineTargetWeekend"
            RoleArn: !GetAtt EventBridgeInvocationRole.Arn

  Outputs:
    WebSocketApiId:
      Value: !Ref WebsocketsApi
      Export:
        Name: ${self:service}-${sls:stage}-WebSocketApiId

    WebSocketApiEndpoint:
      Value: !Sub "wss://${WebsocketsApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
      Export:
        Name: ${self:service}-${sls:stage}-WebSocketApiEndpoint

params:
  prd:
    bubble_assign_match_id: https://unitemate.com/api/1.1/wf/aws_unitemate_assign_match
    bubble_penalty: https://unitemate.com/api/1.1/wf/aws_unitemate_penalty
    bubble_queue_count: https://unitemate.com/api/1.1/wf/aws_queue_count
    bubble_notify_discord: https://unitemate.com/api/1.1/wf/aws_notify_discord
    dummy_account: "1734557995118x731332103265083300"
  dev:
    bubble_assign_match_id: https://unitemate.com/version-test/api/1.1/wf/aws_unitemate_assign_match
    bubble_penalty: https://unitemate.com/version-test/api/1.1/wf/aws_unitemate_penalty
    bubble_queue_count: https://unitemate.com/version-test/api/1.1/wf/aws_queue_count
    bubble_notify_discord: https://unitemate.com/version-test/api/1.1/wf/aws_notify_discord
    dummy_account: "1734023940139x458248834150225500"
