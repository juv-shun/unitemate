service: unitemate
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.9
  region: ap-northeast-1
  stackName: ${sls:stage}-${self:service}-stack
  deploymentBucket:
    name: ${self:service}.sls-deployment-store
    maxPreviousDeploymentArtifacts: 3
  logRetentionInDays: 7
  apiGateway:
    apiKeys:
      - name: ${sls:stage}-${self:service}-apiKey
        value: ${ssm:/${self:service}/${sls:stage}/apiKey}
        description: API Key for ${sls:stage}-${self:service}
  iam:
    role:
      name: ${self:service}-role-${sls:stage}
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt DynamoDBMatchQueue.Arn
            - !Join ["", [!GetAtt DynamoDBMatchQueue.Arn, "/index/*"]]
            - !GetAtt DynamoDBMatchTable.Arn
            - !Join ["", [!GetAtt DynamoDBMatchTable.Arn, "/index/*"]]
            - !GetAtt DynamoDBUserTable.Arn
            - !Join ["", [!GetAtt DynamoDBUserTable.Arn, "/index/*"]]
            - !GetAtt DynamoDBRecordTable.Arn  # レコード
            - !Join ["", [!GetAtt DynamoDBRecordTable.Arn, "/index/*"]]
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:${self:service}-${sls:stage}-*
        - Effect: Allow
          Action:
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${self:service}/bubbleApiKey
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - arn:aws:sqs:${aws:region}:${aws:accountId}:${self:service}-${sls:stage}-match-report-queue
            - !GetAtt AggregationQueue.Arn

  environment:
    MATCH_QUEUE: !Ref DynamoDBMatchQueue
    MATCH_TABLE: !Ref DynamoDBMatchTable
    USER_TABLE: !Ref DynamoDBUserTable
    REPORT_QUEUE: !Ref ReportQueue
    AGGREGATION_QUEUE: !Ref AggregationQueue
    RECORD_TABLE: !Ref DynamoDBRecordTable

package:
  individually: true
  patterns:
    - "!**"
    - src/**
    - pyproject.toml
    - poetry.lock

functions:
  # インキュー ########################
  # キューにインキューするAPI
  inqueue:
    handler: src/db_process_queue.send_inqueue_message
    events:
      - http:
          path: v1/queue/_inqueue
          method: post
          private: true

  # キューからデキューするAPI
  dequeue:
    handler: src/db_process_queue.send_dequeue_message
    events:
      - http:
          path: v1/queue/_dequeue
          method: post
          private: true

  queue_info:
    handler: src/match_queue.get_info
    events:
      - http:
          path: v1/queue
          method: get
          private: true

  # マッチメイク ########################
  match_make: # マッチメイクするバッチ
    handler: src/db_process_queue.send_matchmake_message
    events:
      - schedule:
          name: ${sls:stage}-${self:service}-match-make-schedule
          description: Schedule for match making
          rate: cron(*/5 * * * ? *)
          enabled: ${self:custom.cache.${sls:stage}.schedule_enabled}
    timeout: 15

  # 結果報告、集計 ########################
  match_report: # 試合終了後の試合結果を報告するAPI
    handler: src/db_process_queue.send_match_report_message
    events:
      - http:
          path: v1/match/_report
          method: post
          private: true

  match_info: # ユーザがアサインされているマッチ情報を返すAPI
    handler: src/match_report.get_info
    events:
      - http:
          path: v1/match/{user_id}
          method: get
          private: true

  # ユーザー情報 ########################
  user_upsert: # ユーザを作成・更新するAPI　未使用
    handler: src/user_upsert.handle
    events:
      - http:
          path: v1/users/{user_id}
          method: post
          private: true

  user_delete: # ユーザを削除するAPI　未使用
    handler: src/user_delete.handle
    events:
      - http:
          path: v1/users/{user_id}/_delete
          method: post
          private: true

  user_info: # ユーザ情報を返すAPI
    handler: src/user_info.handle
    events:
      - http:
          path: v1/users/{user_id}
          method: get
          private: true
    environment:
      USER_TABLE: !Ref DynamoDBUserTable
      RECORD_TABLE: !Ref DynamoDBRecordTable

  # ランキング ########################
  get_ranking: # ユーザのレートランキングを返すAPI
    handler: src/rankings.get_ranking
    events:
      - http:
          path: v1/ranking
          method: get
          cors: true
          private: true
          caching:
            enabled: ${self:custom.cache.${sls:stage}.cache_enabled}
            ttlInSeconds: ${self:custom.cache.${sls:stage}.cache_ttl}
            cacheKeyParameters:
              - name: "method.request.querystring.namespace" # 必要に応じて変更
    environment:
      USER_TABLE: !Ref DynamoDBUserTable
      RECORD_TABLE: !Ref DynamoDBRecordTable

custom:
  prune:
    automatic: true
    number: 3
  pythonRequirements:
    dockerizePip: true
    poetryExportWithCredentials: false

  cache:
    prd:
      cache_enabled: true
      cache_ttl: 600 # 10分
      schedule_enabled: true
    dev:
      cache_enabled: false
      cache_ttl: 0
      schedule_enabled: false

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-api-gateway-caching

resources:
  Resources:
    DynamoDBMatchQueue:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-match-queue
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: rate
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: rate_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: rate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBMatchTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-matches
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: match_id
            AttributeType: "N"
          - AttributeName: status
            AttributeType: S
          - AttributeName: matched_unixtime
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: status_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: match_time_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: matched_unixtime
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBUserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-users
        AttributeDefinitions:
          - AttributeName: namespace
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: rate
            AttributeType: "N"
        KeySchema:
          - AttributeName: namespace
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: rate_index
            KeySchema:
              - AttributeName: namespace
                KeyType: HASH
              - AttributeName: rate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    DynamoDBRecordTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-${self:service}-record-table
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: started_date
            AttributeType: "N"
          - AttributeName: match_id
            AttributeType: "N"
        KeySchema:
          - AttributeName: user_id # Use user_id as namespace
            KeyType: HASH
          - AttributeName: match_id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: started_date_index
            KeySchema:
              - AttributeName: user_id
                KeyType: HASH
              - AttributeName: started_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    # SQS
    ReportQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-match-report-queue
    AggregationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${sls:stage}-${self:service}-aggregation-queue.fifo
        FifoQueue: true
        ContentBasedDeduplication: true # 同一のメッセージは重複して処理されないようにする

params:
  prd:
    bubble_assign_match_id: https://unitemate.com/api/1.1/wf/aws_player_assign_match
    bubble_queue_count: https://unitemate.com/api/1.1/wf/aws_queue_count
    bubble_notify_discord: https://unitemate.com/api/1.1/wf/aws_notify_discord
    dummy_account: "1734557995118x731332103265083300"
  dev:
    bubble_assign_match_id: https://unitemate.com/version-test/api/1.1/wf/aws_player_assign_match
    bubble_queue_count: https://unitemate.com/version-test/api/1.1/wf/aws_queue_count
    bubble_notify_discord: https://unitemate.com/version-test/api/1.1/wf/aws_notify_discord
    dummy_account: "1734023940139x458248834150225500"